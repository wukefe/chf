Dyadic
======

A dyadic function only takes two arguments. For example, ``y f x`` where ``f`` is the monadic function and ``x`` and ``y`` are the two arguments the function takes.  Usually, the function ``f`` has different behaviors based on different kinds of input data.

.. _eq:

Equal (=)
~~~~~~~~~

.. include:: primt/end.rst


.. _sub:

Substract (-)
~~~~~~~~~~~~~

.. include:: primt/end.rst


.. _circle:

Circle (@)
~~~~~~~~~~

.. include:: primt/end.rst


.. _mem:

Member (?)
~~~~~~~~~~

.. include:: primt/end.rst


.. _mult:

Multiply (*)
~~~~~~~~~~~~

.. code-block:: none

          2j5 * 3j2.5
    _6.5j20

.. include:: primt/end.rst


.. _div:

Divide (%)
~~~~~~~~~~

.. code-block:: none

          (!6)%2 
    0.5 1 1.5 2 2.5 3
          24%!6
    24 12 8 6 4.8 4

A special monadic form:

.. code-block:: none

          %!6
    1 0.5 0.33333333 0.25 0.2 0.16666667

Now to take the cubic root of numbers or various roots of a number, we do

.. code-block:: none

          1 2 8 1000 81 125 *.%3
    1 1.259921 2 10 4.3267487 5
          1024*.%1 2 3 5 10
    1024 32 10.079368 4 2

.. include:: primt/end.rst


.. _res:

Residue (|)
~~~~~~~~~~~

.. code-block:: none

          2|!12
    1 0 1 0 1 0 1 0 1 0 1 0
          2 3 4.5|9 
    1 0 0
          3.2|3 6.4 7
    3 0 0.6 


.. include:: primt/end.rst


.. _reshape:

Reshape (#)
~~~~~~~~~~~

.. code-block:: none

          a<-2 3#9 2 3 4 5 6
          a
    9 2 3
    4 5 6
          #a
    2 3

.. include:: primt/end.rst


.. _rotate:

Rotate ($)
~~~~~~~~~~

.. include:: primt/end.rst



.. _less:

Less (<)
~~~~~~~~

.. include:: primt/end.rst



.. _gt:

Greater (>)
~~~~~~~~~~~

.. include:: primt/end.rst


.. _indof:

Index Of (\!)
~~~~~~~~~~~~~

.. code-block:: none

        5 1 7 9 3 7 ! 5
    1
        5 1 7 9 3 7 ! 7
    3

.. include:: primt/end.rst


.. _and:

And (^)
~~~~~~~

.. code-block:: none

          1 1 0 1 0 0 ^ 0 1 0 0 1 0
    0 1 0 0 0 0

.. include:: primt/end.rst

.. _or:

Or (&)
~~~~~~

.. code-block:: none

          1 1 0 1 0 0 & 0 1 0 0 1 0
    1 1 0 1 1 0

.. include:: primt/end.rst

.. _add:

Add (+)
~~~~~~~

.. code-block:: none

          1+A<-10
    11
          n+1
    Error: value error
          n+1
           ^
          2j5+3j2.5
    5j7.5

.. include:: primt/end.rst


.. _power:

Power (*.)
~~~~~~~~~~

.. code-block:: none

          2 _3 10 0.5 25 *. 2
    4 9 100 0.25 625
          10 *. _1 0 1 2 3
    0.1 1 10 100 1000
          2*.!10
    2 4 8 16 32 64 128 256 512 1024
          4 9 100 0.25 625 *.0.5
    2 3 10 0.5 25
          _1 *. 0.5
    0j1

.. include:: primt/end.rst


.. _catenate:

Catenate (,)
~~~~~~~~~~~~

.. code-block:: none

          0,!10
    0 1 2 3 4 5 6 7 8 9 10
           (!10),_1
    1 2 3 4 5 6 7 8 9 10 _1
          'WATCH OUT','!'
    WATCH OUT!
          'WATCH OUT',' GUYS!'
    WATCH OUT GUYS!
          100 200,2 3 5
    100 200 2 3 5

.. include:: primt/end.rst


.. _bim:

Binom (\|.)
~~~~~~~~~~~

.. include:: primt/end.rst



.. _rt1:

Rotate on 1st axis ($.)
~~~~~~~~~~~~~~~~~~~~~~~

.. include:: primt/end.rst



.. _encd:

Encode (<.)
~~~~~~~~~~~

.. include:: primt/end.rst



.. _decd:

Decode (>.)
~~~~~~~~~~~

.. include:: primt/end.rst



.. _drop:

Drop (\!.)
~~~~~~~~~~

.. include:: primt/end.rst



.. _take:

Take (^.)
~~~~~~~~~

.. include:: primt/end.rst



.. _min:

Minimum (_.)
~~~~~~~~~~~~

.. include:: primt/end.rst



.. _max:

Maximum (~.)
~~~~~~~~~~~~

.. include:: primt/end.rst



.. _cat1:

Catenate (,)
~~~~~~~~~~~~

.. include:: primt/end.rst



